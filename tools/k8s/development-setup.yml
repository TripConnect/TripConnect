apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        - name: MYSQL_DATABASE
          value: "TripConnect"
        - name: MYSQL_USER
          value: "service"
        - name: MYSQL_PASSWORD
          value: "service"
        ports:
        - containerPort: 3306
  #       volumeMounts:
  #       - name: mysql-persistent-storage
  #         mountPath: /var/lib/mysql
  # volumeClaimTemplates:
  # - metadata:
  #     name: mysql-persistent-storage
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "admin"
        - name: MONGO_INITDB_DATABASE
          value: "tripconnect"
        ports:
        - containerPort: 27017
  #       volumeMounts:
  #       - name: mongodb-persistent-storage
  #         mountPath: /data/db
  # volumeClaimTemplates:
  # - metadata:
  #     name: mongodb-persistent-storage
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
  #       volumeMounts:
  #       - name: redis-persistent-storage
  #         mountPath: /data
  # volumeClaimTemplates:
  # - metadata:
  #     name: redis-persistent-storage
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379

---
# Config map manifest


---

# Application manifests

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: tripconnect-replicaset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tripconnect
  template:
    metadata:
      labels:
        app: tripconnect
    spec:
      containers:
      - name: tripconnect-container
        image: tripconnect:development
        ports:
        - containerPort: 3107
        env:
          - name: SECRET_KEY
            value: "shhhhh"
          - name: MONGODB_CONNECTION_STRING
            value: mongodb://admin:admin@mongodb-service:27017/local?authSource=admin
          - name: DATEBASE_ADDRESS
            value: mysql-service
          - name: DATEBASE_USERNAME
            value: service
          - name: DATEBASE_PASSWORD
            value: service
          - name: DATEBASE_NAME
            value: TripConnect


---

apiVersion: v1
kind: Service
metadata:
  name: tripconnect-service
spec:
  selector:
    app: tripconnect
  ports:
    - protocol: TCP
      port: 3107
      nodePort: 31071
      targetPort: 3107
  type: NodePort

---
