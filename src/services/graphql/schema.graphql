scalar DateTime
scalar Upload

type File {
    filename: String!
    mimetype: String!
    encoding: String!
}

type HealthCheckStatus {
    status: Boolean!
}

type Token {
    accessToken: String!
    refreshToken: String!
}

type User {
    id: ID!
    avatar: String
    username: String!
    displayName: String!
}

type AuthPayload {
    userInfo: User!
    token: Token!
}

type Trip {
    id: ID!
    name: String!
    description: String!
    createdBy: User!
    members: [User!]!
    points: [TripPoint!]!
    createdAt: DateTime!
}

type TripPoint {
    name: String!
    note: String
    arrivedAt: DateTime!
}

enum ConversationType {
  PRIVATE
  GROUP
  TRIP
}

union ConversationCreator = User | Trip

type Conversation {
    id: ID!
    name: String
    members: [User!]!
    messages(page: Int, limit: Int): [Message!]!
    type: String! # ConversationType
    createdBy: ConversationCreator!
    createdAt: DateTime!
    lastMessageAt: DateTime
}

type Message {
    id: ID!
    conversation: Conversation!
    fromUser: User!
    messageContent: String!
    createdAt: DateTime!
}


type Query {
    status: HealthCheckStatus!
    user(id: String!): User!
    users(searchTerm: String!): [User!]!
    conversation(id: String!): Conversation!
    conversations(page: Int, limit: Int, messageLimit: Int): [Conversation!]!
}

type Mutation {
    signin(username: String!, password: String!): AuthPayload!
    signup(username: String!, password: String!, displayName: String!, avatar: Upload): AuthPayload!
    createConversation(name: String, type: String!, members: String!): Conversation!
    createTrip(name: String!, description: String!): Trip!
}
