scalar DateTime

type HealthCheckStatus {
    status: Boolean!
}

type Token {
    accessToken: String!
    refreshToken: String!
}

type User {
    id: ID!
    username: String!
    displayName: String!
    token: Token
}

type Trip {
    id: ID!
    name: String!
    members: [User!]!
}

enum ConversationType {
  PRIVATE
  GROUP
  TRIP
}

union ConversationCreator = User | Trip

type Conversation {
    id: ID!
    name: String
    members: [User!]!
    messages(page: Int, limit: Int): [Message!]!
    type: ConversationType!
    createdBy: ConversationCreator!
    createdAt: DateTime!
    lastMessageAt: DateTime
}

type Message {
    id: ID!
    conversation: Conversation!
    fromUser: User!
    messageContent: String!
    createdAt: DateTime!
}


type Query {
    status: HealthCheckStatus!
    user(user_id: String!): User!
    users(searchTerm: String!): [User!]!
    conversation(conversationId: ID!): Conversation!
    conversations(page: Int, limit: Int): [Conversation!]!
}

type Mutation {
    login(username: String!, password: String!): User!
    signup(username: String!, password: String!, displayName: String!): User!
    createConversation(name: String, type: ConversationType!, members: [String!]!): Conversation!
}
